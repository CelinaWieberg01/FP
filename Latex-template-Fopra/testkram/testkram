import matplotlib.pyplot as plt         # Für Plots
import numpy as np                      # Fürs Rechnen
from uncertainties import ufloat        # zahl = ufloat(nominal_value, std_devs)
import uncertainties.unumpy as unp      # wie ufloat nur mit arrays
from scipy.optimize import curve_fit    # params, cov = curve_fit(fitfunktion, x-wert, y-wert, cov=True)
import scipy.constants as constants         # z.B. h = constants.h für planckzahl

ql = unp.uarray(7.3, 0.05)

a = 27

print(ql**a)

h = constants.h

U_nom, I_nom = np.genfromtxt("testdaten.txt",unpack=True)# originalwerte
print("Spannung", U_nom)
print ("Stromstärke", I_nom)

U_err= np.ones(len(U_nom))*0.05
print(U_err)
U = unp.uarray(U_nom, U_err)#wert mit fehler
print("Spannung mit Fehler" ,U)

I_err= np.ones(len(I_nom))*0.05
print(I_err)
I=unp.uarray(I_nom, I_err)#wert mit fehler
print("Stromstärke mit fehler",I)

P= U*I#leistung
print(P)

plt.plot(unp.nominal_values(U),unp.nominal_values(I), ".", color="purple", label="Messdaten")
plt.xlabel(r"Spannung $U$ in $\si{\volt}$")
plt.ylabel(r"Stromstärke $I$ in $\si{\ampere}$")
plt.legend()
plt.show()

plt.savefig("Plot1.pdf")
plt.figure()

plt.errorbar(unp.nominal_values(U),unp.nominal_values(P), yerr=unp.std_devs(P),fmt= ".")
plt.savefig("Fehlerplot.pdf")
plt.figure()

